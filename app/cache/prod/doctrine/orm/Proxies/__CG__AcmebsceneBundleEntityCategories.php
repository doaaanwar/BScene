<?php

namespace Proxies\__CG__\Acme\bsceneBundle\Entity;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class Categories extends \Acme\bsceneBundle\Entity\Categories implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = array();



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return array('__isInitialized__', 'id', 'name', 'description', 'ranking', 'image', 'meetupCategory', 'eventBriteCategory', 'events');
        }

        return array('__isInitialized__', 'id', 'name', 'description', 'ranking', 'image', 'meetupCategory', 'eventBriteCategory', 'events');
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (Categories $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', array());
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', array());
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', array());

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function setName($name)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setName', array($name));

        return parent::setName($name);
    }

    /**
     * {@inheritDoc}
     */
    public function getName()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getName', array());

        return parent::getName();
    }

    /**
     * {@inheritDoc}
     */
    public function setDescription($description)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDescription', array($description));

        return parent::setDescription($description);
    }

    /**
     * {@inheritDoc}
     */
    public function getDescription()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDescription', array());

        return parent::getDescription();
    }

    /**
     * {@inheritDoc}
     */
    public function setMeetupCategory(\Acme\bsceneBundle\Entity\MeetupCategories $meetupCategory = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setMeetupCategory', array($meetupCategory));

        return parent::setMeetupCategory($meetupCategory);
    }

    /**
     * {@inheritDoc}
     */
    public function getMeetupCategory()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getMeetupCategory', array());

        return parent::getMeetupCategory();
    }

    /**
     * {@inheritDoc}
     */
    public function setRanking($ranking)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setRanking', array($ranking));

        return parent::setRanking($ranking);
    }

    /**
     * {@inheritDoc}
     */
    public function getRanking()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getRanking', array());

        return parent::getRanking();
    }

    /**
     * {@inheritDoc}
     */
    public function setEventBriteCategory(\Acme\bsceneBundle\Entity\EventBriteCategories $eventBriteCategory = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setEventBriteCategory', array($eventBriteCategory));

        return parent::setEventBriteCategory($eventBriteCategory);
    }

    /**
     * {@inheritDoc}
     */
    public function getEventBriteCategory()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getEventBriteCategory', array());

        return parent::getEventBriteCategory();
    }

    /**
     * {@inheritDoc}
     */
    public function setImage(\Acme\bsceneBundle\Entity\Image $image = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setImage', array($image));

        return parent::setImage($image);
    }

    /**
     * {@inheritDoc}
     */
    public function getImage()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getImage', array());

        return parent::getImage();
    }

    /**
     * {@inheritDoc}
     */
    public function addEvent(\Acme\bsceneBundle\Entity\Event $events)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addEvent', array($events));

        return parent::addEvent($events);
    }

    /**
     * {@inheritDoc}
     */
    public function removeEvent(\Acme\bsceneBundle\Entity\Event $events)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeEvent', array($events));

        return parent::removeEvent($events);
    }

    /**
     * {@inheritDoc}
     */
    public function getEvents()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getEvents', array());

        return parent::getEvents();
    }

}
